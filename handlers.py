from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from keyboards import get_main_menu, get_items_keyboard, get_crypto_details

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class CryptoStates(StatesGroup):
    WAITING_FOR_CATEGORY = State()
    WAITING_FOR_ITEM = State()
    WAITING_FOR_QUANTITY = State()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_handlers(dp: Dispatcher):
    @dp.message_handler(commands=['start'])
    async def send_welcome(message: types.Message):
        await message.reply("*üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Crypto Support Bot! üí∏*\n–Ø –ø–æ–º–æ–≥—É —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º.\n*üìç –®–∞–≥ 1:* –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_main_menu())

    @dp.message_handler(commands=['cancel'], state='*')
    async def cancel_action(message: types.Message, state: FSMContext):
        await state.finish()
        await message.reply("*–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.*\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_main_menu())

    @dp.message_handler(state=CryptoStates.WAITING_FOR_CATEGORY)
    async def process_category(message: types.Message, state: FSMContext):
        categories = ["üìà –ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç", "üí∞ –ö–æ—à–µ–ª—å–∫–∏", "üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "‚ùì –ü–æ–º–æ—â—å"]
        if message.text not in categories:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –º–µ–Ω—é.")
            return
        await state.update_data(category=message.text)
        await CryptoStates.WAITING_FOR_ITEM.set()
        await message.reply(f"*üìç –®–∞–≥ 2:* –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {message.text}:", reply_markup=get_items_keyboard(message.text))

    @dp.message_handler(state=CryptoStates.WAITING_FOR_ITEM)
    async def process_item(message: types.Message, state: FSMContext):
        items = {
            "üìà –ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç": ["BTC", "ETH", "USDT"],
            "üí∞ –ö–æ—à–µ–ª—å–∫–∏": ["Metamask", "Trust Wallet"],
            "üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å": ["2FA", "Phishing"],
            "‚ùì –ü–æ–º–æ—â—å": ["FAQ", "–ö–æ–Ω—Ç–∞–∫—Ç—ã"]
        }
        user_data = await state.get_data()
        category = user_data.get('category')
        if message.text not in items.get(category, []):
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–∑ –º–µ–Ω—é.")
            return
        await state.update_data(item=message.text)
        await CryptoStates.WAITING_FOR_QUANTITY.set()
        await message.reply(f"*üìç –®–∞–≥ 3:* –£–∫–∞–∂–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1 –¥–ª—è –∫—Ä–∞—Ç–∫–æ, 2 –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ):", reply_markup=get_crypto_details())

    @dp.message_handler(state=CryptoStates.WAITING_FOR_QUANTITY)
    async def process_quantity(message: types.Message, state: FSMContext):
        if not message.text.isdigit():
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1 –∏–ª–∏ 2).")
            return
        quantity = int(message.text)
        user_data = await state.get_data()
        category = user_data.get('category')
        item = user_data.get('item')
        await state.finish()
        await message.reply(f"*–í–∞—à –∑–∞–ø—Ä–æ—Å:*\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n–í–æ–ø—Ä–æ—Å: {item}\n–£—Ä–æ–≤–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏: {quantity}\n\n*–û—Ç–≤–µ—Ç:* –°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! üòé", reply_markup=get_main_menu())